Міністерство освіти і науки України
Харківський національний університет радіоелектроніки

Факультет комп’ютерних наук

Кафедра програмної інженерії


КУРСОВА РОБОТА
ПОЯСНЮВАЛЬНА ЗАПИСКА
з навчальної дисципліни “ Архітектура програмного забезпечення”
Тема роботи: Програмна система для організації взаємодії власників собак
	
Студент гр. ПЗПІ-21-3                 __________________ Семененко К.А.
                                                       (підпис)
Керівник роботи                           __________________ доц. Лещинська І.О.
                                                       (підпис)
                                                            Роботу захищено «__»_________2024 р.
                                                            з оцінкою _________________________

Комісія:                                         __________________ доц. Лещинський В.О.
                                                                 (підпис)
                                                       __________________ доц. Лещинська І.О.
                                                                 (підпис)
                                                       __________________ ст.викл. Сокорчук І.П.
                                                                 (підпис)



Харків 
2024 р
Харківський національний університет радіоелектроніки

Факультет комп’ютерних наук                   Кафедра програмної інженерії        
Спеціальність 121 – Інженерія програмного забезпечення                                  
Курс           3            Семестр                                           6                                        
Навчальна дисципліна Архітектура програмного забезпечення                         

ЗАВДАННЯ
НА КУРСОВУ РОБОТУ СТУДЕНТОВІ

                                    Семененку Костянтину Андрійовичу                                  
1. Тема роботи: «Програмна система для організації взаємодії власників собак»                                                                                                       
2. Термін узгодження завдання курсової роботи «___»                       2021 р.
3. Термін здачі студентом закінченої роботи «___»                       2021 р.
4. Вихідні дані до проекту (роботи): В програмній системі передбачити реєстрацію та авторизацію користувачів, додавання, редагування та видалення профілів собак. Використовувати ОС Windows 10, базу даних MongoDB, серверну частину реалізувати за допомогою NestJS, фронтенд-частину реалізувати за допомогою Angular, середовище розробки Visual Studio Code.
5. Зміст пояснювальної записки (перелік питань, що належить розробити) вступ, аналіз предметної області, постановка задачі, проектування програмного проекту, структура бази даних, кодування програмного проекту, опис розробленої програмної системи, висновки, перелік посилань, додатки
6. Перелік графічного матеріалу (з точним зазначенням обов’язкових креслень) схема бази даних, діаграма варіантів використання, діаграма розгортання, інтерфейс головної сторінки                                                   
 
КАЛЕНДАРНИЙ ПЛАН


№	Назва етапів курсової роботи	Термін виконання етапів роботи	Примітка
1	Функціональна специфікація програмного проекту	15.04.2024	Виконано
2	Проектування програмного проекту	30.04.2024	Виконано
3	Кодування програмного проекту	08.06.2024	Виконано
4	Оформлення пояснювальної записки	08.06.2024	Виконано
5	Захист курсової роботи	30.06.2024	Виконано


Дата видачі завдання «______»______________2024 р.

Керівник                                     ______________ доц. Лещинська І.О.
                                                                       (підпис)

Завдання прийняв до виконання 
ст.гр. ПЗПІ-21-3                                 _____________         Семененко К.А.
                                                                                (підпис)
 
РЕФЕРАТ


Пояснювальна записка до курсової роботи: 33 с., 4 рис., 5 джерел.
МІКРОСЕРВІСНА АРХІТЕКТУРА, NESTJS, ANGULAR, MONGODB, JWT ТОКЕНИ, РЕЄСТРАЦІЯ, АВТОРИЗАЦІЯ, ПЛАТІЖНА СИСТЕМА, STRIPE, КОРИСТУВАЦЬКИЙ ІНТЕРФЕЙС, TCP ПРОТОКОЛ
Об’єктом розробки є програмна система для організації взаємодії власників собак. Мета роботи — створення платформи, яка дозволяє користувачам реєструватися, створювати профілі для себе та своїх собак, знаходити інших користувачів на основі геолокації та уподобань, а також обробляти платежі за допомогою Stripe.
Для реалізації проекту були використані сучасні методи розробки, зокрема мікросервісна архітектура на базі NestJS, зберігання даних у MongoDB, клієнтська частина на Angular, а також забезпечення безпеки за допомогою JWT токенів.
У результаті виконання курсової роботи була створена функціональна система, яка забезпечує зручну взаємодію користувачів, надійність обробки даних та безпеку транзакцій. Система також пройшла тестування, що підтвердило її готовність до використання.






 
ЗМІСТ


Вступ 	6
1 Аналіз предметної області 	7
1.1 Огляд існуючих рішень	7
1.2 Визначення вимог до програмної системи	7
1.3 Особливості взаємодії користувачів у таких системах	9
2 Проектування програмного забезпечення	11
2.1 Вибір архитектури програмного забезпечення та технологій	11
2.2 Структура бази даних	12
3 Реалізація програмного проекту	15
3.1 Розробка серверної частини	15
3.2  Розробка клієнтської частини	25
4 Діаграми	27
4.1 Діаграма розгортання	27
4.2 Діаграма прецедентів	28
4.3 Діаграма послідовності	39
Висновки	30
Перелік джерел посилання..	32


 
ВСТУП


Програмна система для організації взаємодії власників собак — це спеціалізована онлайн платформа, призначена для полегшення зв’язку між власниками собак з метою організації спільних прогулянок, догляду та соціалізації тварин. Система реалізована з використанням таких технологій, як NestJS для серверної частини, Mongoose та MongoDB для управління та зберігання даних, Angular з використанням rxjs та redux для побудови інтерактивного користувацького інтерфейсу.
Тема курсового проекту: "Програмна система для організації взаємодії власників собак". Основною метою цього проекту є розробка платформи, яка надає можливість власникам собак створювати профілі своїх тварин, переглядати профілі інших користувачів, застосовувати фільтри для пошуку та встановлювати контакти для організації спільних заходів. Система забезпечує можливість перегляду детальної інформації про собак рекомендації профілів за відстанню від користувача та його налаштуваннями.
Адміністратор платформи має можливість управляти профілями користувачів, редагувати інформацію, видаляти акаунти та контролювати активність на платформі.
Основна концепція додатку полягає у створенні інтерактивного простору для власників собак, де вони можуть легко знаходити однодумців та організовувати взаємодії між своїми домашніми тваринами. Всі дані зберігаються у базі даних MongoDB, з якою взаємодія здійснюється за допомогою Mongoose. Розробка програмного забезпечення виконувалась з використанням NestJS для серверної частини, Angular для клієнтської частини, а також таких інструментів, як Visual Studio Code для написання коду, Postman для тестування API та Docker для контейнеризації і розгортання додатку.
Для використання системи необхідно відвідати веб-сайт, де розгорнута платформа, за відповідною веб-адресою. 
1 АНАЛІЗ ПРЕДМЕТНОЇ ОБЛАСТІ
1.1	Огляд існуючих рішень

На ринку існує декілька онлайн платформ, які, подібно до розроблюваної програмної системи, спрямовані на забезпечення взаємодії між користувачами на основі спільних інтересів. Однією з таких платформ є Bumble, яка об'єднує функції для знайомств, пошуку друзів та створення професійних зв’язків.
Bumble пропонує три основні режими: Bumble Date для романтичних знайомств, Bumble BFF для пошуку друзів та Bumble Bizz для створення професійних зв’язків. Основні принципи Bumble, такі як створення профілю, використання фільтрів для пошуку та можливість ініціювання комунікації жінками, забезпечують високий рівень персоналізації та безпеки користувачів.
У контексті розроблюваної системи для власників собак, аналогічний підхід може бути корисним для створення інтуїтивного та зручного інтерфейсу, що дозволяє користувачам легко знаходити однодумців на основі схожих інтересів, а саме — у сфері догляду та соціалізації собак. Як і в Bumble, можна впровадити функції створення детальних профілів, використання фільтрів для пошуку потенційних партнерів для прогулянок та інших заходів, а також можливість комунікації між користувачами через платформу.
Таким чином, існуючі рішення, такі як Bumble, демонструють важливість інтеграції соціальних функцій із можливістю персоналізації користувацького досвіду, що має бути враховано при проектуванні та реалізації нової системи для взаємодії власників собак.

1.2	Визначення вимог до програмної системи

Для розробки програмної системи для організації взаємодії власників собак було визначено такі ключові вимоги:
а.	Основні функції системи
–	Реєстрація користувачів: Користувачі повинні мати можливість зареєструватися в системі, створюючи акаунти за допомогою електронної пошти або інших способів аутентифікації.
–	Створення профілів для собак: Кожен користувач зможе створювати профіль для своєї собаки, включаючи інформацію про породу, вік, особливості та фотографії.
–	Оплата покращених функцій аккаунту: Система повинна інтегруватися з платіжною платформою Stripe для обробки платежів за додаткові функції та послуги. Це забезпечить зручний спосіб оплати, не зберігаючи дані карток на сервері.
–	Повідомлення за допомогою електронної пошти: Користувачі повинні отримувати сповіщення через електронну пошту про важливі події, такі як підтвердження реєстрації, повідомлення про нові повідомлення та інші оновлення.
–	Мікросервіс для підбору потенційних партнерів для взаємодії: Система повинна містити мікросервіс, який враховує відстань між користувачами за допомогою координат та їх уподобання для ефективного підбору потенційних партнерів для взаємодії.
б.	Вимоги до безпеки та конфіденційності
–	Хешування паролів: Усі паролі користувачів повинні бути захищені за допомогою хешування для запобігання їх компрометації у випадку зламу системи.
–	Авторизація та аутентифікація: Система повинна використовувати JWT (JSON Web Tokens) для авторизації та аутентифікації користувачів, що забезпечує захищений доступ до ресурсів системи.
–	Безпека платіжних транзакцій: Інтеграція з Stripe має на меті забезпечити безпеку платіжних транзакцій і уникнути зберігання даних карток на сервері, що мінімізує ризики фінансових витоків та шахрайства.
в.	Продуктивність і масштабованість
–	Специфічні вимоги до продуктивності та масштабованості наразі не визначені, але система повинна бути спроектована з урахуванням потенційних високих навантажень та можливості масштабування для підтримки великої кількості користувачів.
Ці вимоги спрямовані на забезпечення ефективної роботи системи, безпеки даних користувачів та зручності використання для кінцевих користувачів.

1.3	Особливості взаємодії користувачів у подібних системах

Взаємодія користувачів у системах для організації взаємодії власників собак подібна до інших соціальних платформ, що орієнтовані на пошук і встановлення контактів між користувачами з спільними інтересами. Такі системи зазвичай пропонують користувачам різноманітні функції для полегшення взаємодії та забезпечення максимально комфортного користувацького досвіду.
–	Процес створення профілів: Користувачі реєструються в системі, створюючи обліковий запис, а потім можуть додавати інформацію про себе та своїх домашніх тварин. Цей процес включає завантаження фотографій, введення детальної інформації про собаку (наприклад, порода, вік, особливості поведінки) та інші дані, що можуть бути корисними для встановлення контактів з іншими користувачами.
–	Пошук та підбір користувачів: Системи подібного типу зазвичай пропонують інструменти для пошуку та фільтрації інших користувачів за різними критеріями, такими як відстань, спільні інтереси чи певні характеристики собак. Використання алгоритмів, які враховують уподобання користувачів, дозволяє забезпечити більш точний підбір потенційних партнерів для спільних прогулянок чи інших заходів.
–	Організація зустрічей та комунікація: Важливою частиною подібних платформ є функція організації спільних заходів або зустрічей. Користувачі можуть домовлятися про зустрічі через систему обміну повідомленнями або через інтегровані функції планування подій. Також можливі сповіщення про майбутні заходи та підтвердження участі.
Таким чином, особливості взаємодії користувачів у подібних системах зосереджені на забезпеченні зручності користування, безпеки та ефективності у пошуку та організації взаємодій між користувачами на основі спільних інтересів. Ці аспекти мають бути враховані при розробці програмної системи для організації взаємодії власників собак.
 
2 ПРОЕКТУВАННЯ ПРОГРАМНОГО ЗАБЕЗПЕЧЕННЯ ТА СТРУКТУРИ БАЗИ ДАНИХ
2.1 Вибір архітектури програмного забезпечення та технологій

Програмна система побудована на основі мікросервісної архітектури, що дозволяє розділити функціональність на декілька незалежних сервісів, кожен з яких виконує окрему задачу.
Мікросервісна архітектура — це підхід до розробки програмного забезпечення, в якому велика програма розбивається на невеликі автономні сервіси (мікросервіси). Кожен мікросервіс відповідає за певну функціональність і може бути розроблений, розгорнутий та масштабований незалежно від інших. Основні переваги мікросервісної архітектури включають:
Модульність і незалежність: Кожен мікросервіс функціонує як окремий модуль, що дозволяє легше впроваджувати зміни та оновлення без впливу на інші частини системи.
Масштабованість: Мікросервіси можна масштабувати незалежно залежно від навантаження, що дозволяє оптимізувати використання ресурсів.
Надійність: Помилка в одному мікросервісі не призводить до відмови всієї системи, що покращує загальну надійність програми.
Простота розробки і підтримки: Мікросервіси дозволяють розробникам зосередитися на одній задачі, спрощуючи процес розробки та полегшуючи тестування і підтримку.
У даній системі використовуються такі мікросервіси:
–	Auth Service (Мікросервіс авторизації та управління профілями): Виконує функції реєстрації користувачів, аутентифікації та управління профілями. Використовує NestJS для реалізації логіки і MongoDB для зберігання даних користувачів.
–	Payments Service (Мікросервіс оплати): Інтегрується з платіжною платформою Stripe для обробки платежів. Виконує всі операції, пов’язані з обробкою транзакцій, не зберігаючи дані платіжних карток на сервері.
–	Dogs Service (Мікросервіс управління профілями собак): Управляє профілями собак, включаючи додавання, редагування та збереження інформації. Всі дані зберігаються у MongoDB.
–	Notifications Service (Мікросервіс сповіщень): Відповідає за надсилання сповіщень користувачам через електронну пошту для різних подій у системі, таких як реєстрація або нові повідомлення.
–	Matches Service (Мікросервіс підбору користувачів): Відповідає за підбір потенційних партнерів для спільних заходів, використовуючи дані про геолокацію та вподобання користувачів.
Взаємодія між мікросервісами відбувається за допомогою TCP протоколу, що забезпечує ефективний обмін даними і знижує затримки в системі. Зовнішні клієнти (наприклад, веб-додатки) взаємодіють із системою через REST API, що забезпечує простоту використання і сумісність з різними платформами.

2.2 Структура бази даних

Для зберігання даних у системі використовується MongoDB, що дозволяє зберігати дані в гнучкому форматі документів. Це забезпечує високу продуктивність та можливість роботи з великими обсягами інформації.
Основні схеми бази даних включають:
–	UserDocument (Схема користувача): Зберігає інформацію про користувачів, включаючи особисті дані, такі як електронна пошта, пароль, ім'я, біографія, дата народження, місцезнаходження і тип підписки. Ця схема має індексацію по геолокації (location) для ефективного пошуку користувачів на основі їх місцезнаходження.
–	SubscriptionDocument (Схема підписки): Включає інформацію про типи підписок, доступні в системі, такі як назва та вартість.
–	DogDocument (Схема собаки): Містить інформацію про собак, включаючи такі дані, як ім'я, порода, вік, розмір, медичні умови і особливості поведінки.
–	MatchDocument (Схема підбору): Зберігає інформацію про взаємодію між користувачами, включаючи статус підбору та дати різних подій, пов'язаних з підбором.
–	PreferenceDocument (Схема уподобань): Містить уподобання користувачів щодо вибору потенційних партнерів, таких як розмір та порода собак, рівень енергії і інші параметри.
На рисунку 2.1 зображена діаграма бази даних, на якій показані всі схеми даних і їх взаємозв’язки, що забезпечує наочне розуміння структури даних та взаємодії між різними компонентами системи.
Ця структура бази даних спроектована з урахуванням потреб системи, забезпечуючи ефективну обробку даних, безпеку та зручність використання.
 
Рисунок 2.1 – ER діаграма бази даних

 
3 РЕАЛІЗАЦІЯ ПРОГРАМНОГО ПРОЕКТУ
3.1 Розробка серверної частини

Розробка серверної частини програмної системи здійснювалася з використанням фреймворку NestJS, який забезпечує ефективну роботу з мікросервісною архітектурою та сприяє швидкій розробці надійного і масштабованого серверного коду. Основними задачами серверної частини є обробка запитів від клієнтів, управління доступом до даних, забезпечення безпеки та взаємодія між різними мікросервісами системи.

3.1.1 Створення мікросервісів

Кожен мікросервіс був створений як окремий проект, побудований на основі NestJS, що дозволяє забезпечити чітку модульність та ізоляцію функціональності. Основні мікросервіси включають:
–	Auth Service: Реалізація мікросервісу для реєстрації, авторизації та управління профілями користувачів. Цей сервіс використовує JWT (JSON Web Tokens) для забезпечення безпеки аутентифікації та авторизації користувачів. Приклад коду модуля авторизації:

1  @Module({
2    imports: [
3      UsersModule,
4      LoggerModule,
5      ConfigModule.forRoot({
6        isGlobal: true,
7        validationSchema: Joi.object({
8          MONGODB_URI: Joi.string().required(),
9          JWT_SECRET: Joi.string().required(),
10          JWT_EXPIRATION: Joi.string().required(),
11          HTTP_PORT: Joi.number().required(),
12          TCP_PORT: Joi.number().required(),
13          PAYMENTS_HOST: Joi.string().required(),
14          PAYMENTS_PORT: Joi.number().required(),
15        }),
16      }),
17      JwtModule.registerAsync({
18        useFactory: (configService: ConfigService) => ({
19          secret: configService.get<string>('JWT_SECRET'),
20          signOptions: { expiresIn: `${configService.get('JWT_EXPIRATION')}s` }
21        }),
22        inject: [ConfigService],
23      }),
24      SubscriptionModule
25    ],
26    controllers: [AuthController],
27    providers: [AuthService, LocalStrategy, JwtStrategy],
28  })
29  export class AuthModule { }

Приклад коду стратегії валідації JWT токену за допомогою бібліотеки passport.js:

1  @Injectable()
2  export class JwtStrategy extends PassportStrategy(Strategy) {
3      constructor(
4          configService: ConfigService,
5          private readonly userService: UsersService,
6      ) {
7          super({
8              jwtFromRequest: ExtractJwt.fromExtractors([
9                  (request: any) => request?.cookies?.Authentication || request?.Authentication
10              ]),
11              secretOrKey: configService.get('JWT_SECRET')
12          })
13      }
14  
15      async validate({ userId }: TokenPayload) {
16          const user = await this.userService.getUser({ _id: userId });
17          if (!user) {
18              throw new UnauthorizedException();
19          }
20          return user;
21      }
22  }

Приклад контролеру модулю авторизації у якому використовується, як RestAPI так і TCP протокол. Також використовуються декоратори для захисту ендпоїнтів та отримання користувача з запросу:

1  import { Controller, Get, Post, Res, UseGuards } from '@nestjs/common';
2  import { AuthService } from './auth.service';
3  import { LocalAuthGuard } from './guards/local-auth.guard';
4  import { UserDocument } from './users/models/user.schema';
5  import { Response } from 'express';
6  import { MessagePattern, Payload } from '@nestjs/microservices';
7  import { JwtAuthGuard } from './guards/jwt-auth.guard';
8  import { CurrentUser } from '@app/common';
9  
10  // Controller for authentication-related routes
11  @Controller('auth')
12  export class AuthController {
13    // Constructor to inject AuthService
14    constructor(private readonly authService: AuthService) {}
15  
16    // Route handler for user login, using LocalAuthGuard for authentication
17    @UseGuards(LocalAuthGuard)
18    @Post('login')
19    async login(
20      @CurrentUser() user: UserDocument, // Retrieves current user from request
21      @Res({ passthrough: true }) response: Response,
22    ) {
23      await this.authService.login(user, response);
24      response.send(user);
25    }
26  
27    // Route handler for authentication check, using JwtAuthGuard for authorization
28    @UseGuards(JwtAuthGuard)
29    @MessagePattern('authenticate')
30    async authenticate(@Payload() data: any) {
31      return data.user;
32    }
33  }

–	Payments Service: Цей мікросервіс відповідає за інтеграцію з платіжною платформою Stripe, забезпечуючи обробку транзакцій та управління підписками користувачів. Всі дані про платежі обробляються безпосередньо Stripe, що знижує ризики, пов’язані зі зберіганням конфіденційної інформації.

1  @Controller()
2  export class PaymentsController {
3    constructor(private readonly paymentsService: PaymentsService) {}
4  
5    @MessagePattern('create_charge')
6    @UsePipes(new ValidationPipe())
7    async createCharge(@Payload() data: PaymentsCreateChargeDto) {
8      return this.paymentsService.createCharge(data);
9    }
10  }

–	Dogs Service: Відповідає за управління профілями собак, включаючи створення, оновлення та видалення інформації. Використовує MongoDB для зберігання даних про собак, що дозволяє зберігати різноманітні та неструктуровані дані. Приклад коду створення схеми собаки для MongoDB за допомогою бібліотеки @nestjs/mongoose:

1  import { AbstractDocument } from "@app/common";
2  import { Prop, Schema, SchemaFactory } from "@nestjs/mongoose";
3  import { SchemaTypes, Types } from "mongoose";
4  
5  @Schema({ versionKey: false, timestamps: true })
6  export class DogDocument extends AbstractDocument {
7      @Prop({ required: true })
8      name: string;
9  
10      @Prop({ type: SchemaTypes.ObjectId, ref: 'UserDocument', required: true })
11      ownerId: Types.ObjectId;
12  
13      @Prop({ required: true })
14      breed: string;
15  
16      @Prop({ required: true })
17      age: number;
18  
19      @Prop({ required: true, enum: ['male', 'female'] })
20      gender: string;
21  
22      @Prop({ required: true, enum: ['small', 'medium', 'large'] })
23      size: string;
24  
25      @Prop({
26          type: {
27              energyLevel: { type: String, enum: ['low', 'medium', 'high'] },
28              friendliness: { type: String, enum: ['shy', 'friendly', 'aggressive'] },
29              playfulness: { type: String, enum: ['not playful', 'somewhat playful', 'very playful'] },
30              preferences: {
31                  likesWater: { type: Boolean, default: false },
32                  likesToys: [String],
33                  favoriteActivities: [String],
34              },
35          },
36          _id: false,
37          required: false
38      })
39      personality: {
40          energyLevel: string;
41          friendliness: string;
42          playfulness: string;
43          preferences: {
44              likesWater: boolean;
45              likesToys: string[];
46              favoriteActivities: string[];
47          };
48      };
49  
50      @Prop({
51          type: {
52              weight: Number,
53              vaccinations: [
54                  {
55                      name: { type: String, required: true },
56                      date: { type: Date, required: true },
57                      nextDueDate: { type: Date, required: true },
58                  },
59              ],
60              medicalConditions: [String],
61              medications: [
62                  {
63                      name: { type: String, required: true },
64                      dosage: { type: String, required: true },
65                      frequency: { type: String, required: true },
66                  },
67              ],
68          },
69          _id: false,
70          required: false
71      })
72      health: {
73          weight: number;
74          vaccinations: {
75              name: string;
76              date: Date;
77              nextDueDate: Date;
78          }[];
79          medicalConditions: string[];
80          medications: {
81              name: string;
82              dosage: string;
83              frequency: string;
84          }[];
85      };
86  
87      @Prop({required: false})
88      profileImageUrl?: string;
89  }
90  
91  export const DogSchema =
92      SchemaFactory.createForClass(DogDocument);

3.1.2 Взаємодія між мікросервісами

Взаємодія між мікросервісами здійснюється за допомогою TCP протоколу в рамках платформи NestJS microservices, що забезпечує швидку і ефективну передачу даних між різними компонентами системи. Цей підхід дозволяє мінімізувати затримки і забезпечує високу продуктивність системи. Приклад коду для створення та запуску мікросервісу:

1  async function bootstrap() {
2    const app = await NestFactory.create(NotificationsModule);
3    const configService = app.get(ConfigService);
4    app.connectMicroservice({
5      transport: Transport.TCP,
6      options: {
7        host: '0.0.0.0',
8        port: configService.get('PORT'),
9      },
10    });
11    app.useLogger(app.get(Logger));
12    await app.startAllMicroservices();
13  }
14  bootstrap();

Приклад коду для налаштування клієнту для TCP взаємодії між мікросервісами:

1  @Module({
2    imports: [
3      ConfigModule.forRoot({
4        isGlobal: true,
5        validationSchema: Joi.object({
6          PORT: Joi.number().required(),
7          NOTIFICATIONS_HOST: Joi.string().required(),
8          NOTIFICATIONS_PORT: Joi.number().required(),
9          STRIPE_SECRET_KEY: Joi.string().required(),
10        }),
11      }),
12      LoggerModule,
13      ClientsModule.registerAsync([ // Client for notifications service TCP connection
14        {
15          name: NOTIFICATIONS_SERVICE,
16          useFactory: (configService: ConfigService) => ({
17            transport: Transport.TCP,
18            options: {
19              host: configService.get('NOTIFICATIONS_HOST'),
20              port: configService.get('NOTIFICATIONS_PORT'),
21            }
22          }),
23          inject: [ConfigService],
24        }
25      ])
26    ],
27    controllers: [PaymentsController],
28    providers: [PaymentsService],
29  })
30  export class PaymentsModule {}

3.1.3 Безпека та управління доступом

Забезпечення безпеки даних користувачів є критично важливим аспектом розробки серверної частини. Для цього було використано кілька рівнів захисту, включаючи хешування паролів, авторизацію за допомогою JWT токенів, а також обмеження доступу до чутливих даних через ролі та права доступу.
Таким чином, розробка серверної частини базувалася на сучасних підходах і технологіях, що забезпечує високу продуктивність, безпеку і зручність використання програмної системи.
3.2 Розробка клієнтської частини

Клієнтська частина програмної системи розроблена з використанням фреймворку Angular, який дозволяє створювати динамічні та інтерактивні веб-застосунки. Основними завданнями клієнтської частини є забезпечення користувачів зручним інтерфейсом для взаємодії з системою, обробка запитів до серверної частини та відображення отриманих даних.
Клієнтська частина реалізована з урахуванням принципів модульності, що дозволяє легко розширювати функціонал та підтримувати кодову базу. Основні компоненти включають:
–	Компоненти користувацького інтерфейсу: Відповідають за відображення даних та взаємодію користувачів із системою. Включають різноманітні UI елементи, такі як форми для реєстрації та входу, списки профілів собак, сторінки налаштувань тощо.
–	Сервіси: Реалізують логіку взаємодії з серверною частиною через HTTP-запити, використовуючи Angular HttpClient. Вони також обробляють відповіді від сервера та управляють станом застосунку за допомогою Angular's rxjs.
–	Модулі: Організовують компоненти та сервіси у функціональні блоки, що сприяє зручності управління кодом та його повторного використання.
Клієнтська частина розроблена з урахуванням принципів адаптивного дизайну, що забезпечує коректне відображення інтерфейсу на різних пристроях, таких як десктопи, планшети та смартфони. Крім того, особлива увага приділяється швидкодії та відгуку застосунку, що покращує користувацький досвід.
Таким чином, клієнтська частина системи забезпечує повний спектр можливостей для користувачів, інтегруючись з серверною частиною для виконання всіх необхідних операцій. 


За допомогою штучного інтелекту було розроблено приклад інтерфейсу головної сторінки на рисунку 3.1.

 
Рисунок 3.1 – Інтерфейс головної сторінки сайту

 
4 ДІАГРАМИ
4.1 Діаграма розгортання

Діаграма розгортання(рис. 4.1) ілюструє архітектуру програмної системи, побудованої на основі мікросервісної архітектури з використанням Docker. Діаграма показує, як різні компоненти системи розміщені на фізичних або віртуальних вузлах (сервери або контейнери) і як вони взаємодіють між собою через мережеві протоколи.

 
Рисунок 4.1 – Діаграма розгортання
 
4.2 Діаграма прецедентів

Діаграма прецедентів(рис. 4.2) ілюструє взаємодію користувачів з програмною системою для організації взаємодії власників собак. Діаграма показує різні варіанти використання (сценарії) системи, а також роль користувачів, які виконують ці сценарії.

 
Рисунок 4.2 – Діаграма прецедентів
 

4.3 Діаграма послідовності

Діаграма послідовності(рис. 4.3) ілюструє процес здійснення платежу користувачем для підписки на покращені функції в системі через інтеграцію з платіжною системою Stripe. Вона показує взаємодію між користувачем, клієнтом, мікросервісом PaymentsService, Stripe API та базою даних MongoDB.

 
Рисунок 4.3 – Діаграма послідовності
 
ВИСНОВКИ


В ході розробки програмної системи для організації взаємодії власників собак були досягнуті наступні ключові результати:
–	Реалізовано мікросервісну архітектуру: Система була побудована на основі мікросервісної архітектури, що дозволило розділити функціональність на окремі модулі. Це рішення сприяє підвищенню гнучкості та масштабованості системи, забезпечуючи можливість незалежної розробки, розгортання та масштабування кожного мікросервісу.
–	Використання сучасних технологій: Для розробки системи були використані сучасні технології, такі як NestJS для серверної частини та Angular для клієнтської частини, а також MongoDB для зберігання даних. Це дозволило створити надійну та ефективну систему, яка відповідає сучасним вимогам продуктивності і безпеки.
–	Інтеграція з платіжними системами та зовнішніми сервісами: Завдяки інтеграції з платіжною платформою Stripe, система забезпечує безпечну обробку платежів і управління підписками користувачів. Інтеграція зі службами сповіщень дозволяє інформувати користувачів про важливі події, підвищуючи їх залученість та зручність використання платформи.
–	Оптимізована структура бази даних: Використання MongoDB як основної бази даних дозволило реалізувати гнучке зберігання даних, що підходить для різноманітних і динамічних потреб системи. Структура даних була оптимізована для швидкого доступу та ефективного пошуку, що покращує продуктивність системи.
–	Проведено ретельне тестування: Система пройшла комплексне модульне та інтеграційне тестування, що дозволило виявити та усунути потенційні помилки на ранніх етапах розробки. Це сприяло підвищенню якості програмного забезпечення та забезпеченню його надійності в експлуатації.
–	Забезпечено безпеку та захист даних: Особлива увага була приділена питанням безпеки, включаючи хешування паролів, авторизацію за допомогою JWT токенів та захист платіжних транзакцій. Це забезпечило високий рівень безпеки для користувачів та їх даних.
–	Розроблено зручний користувацький інтерфейс: Інтерфейс системи був розроблений з урахуванням принципів зручності та адаптивності, що забезпечує комфортне використання платформи на різних пристроях і сприяє позитивному користувацькому досвіду.
Загалом, розроблена програмна система відповідає поставленим цілям і вимогам, забезпечуючи ефективну платформу для взаємодії власників собак. Вона поєднує сучасні технологічні рішення, надійність і зручність використання, що робить її конкурентоспроможною на ринку аналогічних рішень. Майбутні етапи розвитку можуть включати розширення функціональності, вдосконалення користувацького досвіду та інтеграцію нових технологій для подальшого покращення продуктивності та безпеки системи. 
 
ПЕРЕЛІК ДЖЕРЕЛ ПОСИЛАННЯ


1.	Документація NestJS – URL: https://docs.nestjs.com(дата звернення: 25.08.2024)
2.	Документація Angular – URL: https://angular.io/docs(дата звернення: 26.08.2024)
3.	Документація MongoDB – URL: https://docs.mongodb.com(дата звернення: 26.08.2024)
4. Документація Stripe API – URL: https://stripe.com/docs/api(дата звернення: 26.08.2024).
5. 	Документація Docker – URL: https://docs.docker.com (дата звернення: 26.08.2024).
















 
